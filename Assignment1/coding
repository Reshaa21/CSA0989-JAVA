import java.util.*;

public class SignalOptimizer {

    private static final int lane= 3;
    private static final int vehiclesmax= 20;
    private static int[][][] dp;
    private static void initializeDP() 
{
        dp = new int[vehiclesmax + 1][vehiclesmax + 1][vehiclesmax + 1];
        for (int[][] layer : dp)
 	{
            for (int[] row : layer)
		 {
                Arrays.fill(row, Integer.MAX_VAL);
           	 }
        }
        dp[0][0][0] = 0; // Initial state with no vehicles has zero waiting time
  }

    private static int MinimumWaitingTime(int[] queueLengths) 
{
        for (int i = 0; i <= queueLengths[0]; i++)
	 {
            for (int j = 0; j <= queueLengths[1]; j++)
		 {
                for (int k = 0; k <= queueLengths[2]; k++) 
			{
                    if (dp[i][j][k] == Integer.MAX_VAL) continue;

                    if (i > 0)
			 {
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i - 1][j][k] + i);
                         }
                    if (j > 0) 
			{
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i][j - 1][k] + j);
                         }
                    if (k > 0)
			 {
                        dp[i][j][k] = Math.min(dp[i][j][k], dp[i][j][k - 1] + k);
                          }

                    
                    System.out.println("dp[" + i + "][" + j + "][" + k + "] = " + dp[i][j][k]);
                }
            }
        }
        return dp[queueLengths[0]][queueLengths[1]][queueLengths[2]];
    }

    public static void main(String[] args)
	 {
        int[] queueLengths = {5, 2, 6};

        initializeDP();

        int result = MinimumWaitingTime(queueLengths);
        System.out.println("Minimum Waiting Time: " + result);
    	}
}
